// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authenticationProtoBuf.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_authenticationProtoBuf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_authenticationProtoBuf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_authenticationProtoBuf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_authenticationProtoBuf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_authenticationProtoBuf_2eproto;
namespace authentProtoBuf {
class AuthenticateWeb;
struct AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
struct AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
struct AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
struct CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFailure;
struct CreateAccountWebFailureDefaultTypeInternal;
extern CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
class CreateAccountWebSuccess;
struct CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
}  // namespace authentProtoBuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace authentProtoBuf {
enum CreateAccountWebFailure_reason : int {
  CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFailure_reason_INVALID_PASSWORD = 1,
  CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR = 2,
};

bool CreateAccountWebFailure_reason_IsValid(int value);
extern const uint32_t CreateAccountWebFailure_reason_internal_data_[];
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MIN = static_cast<CreateAccountWebFailure_reason>(0);
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MAX = static_cast<CreateAccountWebFailure_reason>(2);
constexpr int CreateAccountWebFailure_reason_reason_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CreateAccountWebFailure_reason_descriptor();
template <typename T>
const std::string& CreateAccountWebFailure_reason_Name(T value) {
  static_assert(std::is_same<T, CreateAccountWebFailure_reason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to reason_Name().");
  return CreateAccountWebFailure_reason_Name(static_cast<CreateAccountWebFailure_reason>(value));
}
template <>
inline const std::string& CreateAccountWebFailure_reason_Name(CreateAccountWebFailure_reason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CreateAccountWebFailure_reason_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CreateAccountWebFailure_reason_Parse(absl::string_view name, CreateAccountWebFailure_reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateAccountWebFailure_reason>(
      CreateAccountWebFailure_reason_descriptor(), name, value);
}
enum AuthenticateWebFailure_reason : int {
  AuthenticateWebFailure_reason_INVALID_CREDENTIALS = 0,
  AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR = 1,
};

bool AuthenticateWebFailure_reason_IsValid(int value);
extern const uint32_t AuthenticateWebFailure_reason_internal_data_[];
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MIN = static_cast<AuthenticateWebFailure_reason>(0);
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MAX = static_cast<AuthenticateWebFailure_reason>(1);
constexpr int AuthenticateWebFailure_reason_reason_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
AuthenticateWebFailure_reason_descriptor();
template <typename T>
const std::string& AuthenticateWebFailure_reason_Name(T value) {
  static_assert(std::is_same<T, AuthenticateWebFailure_reason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to reason_Name().");
  return AuthenticateWebFailure_reason_Name(static_cast<AuthenticateWebFailure_reason>(value));
}
template <>
inline const std::string& AuthenticateWebFailure_reason_Name(AuthenticateWebFailure_reason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthenticateWebFailure_reason_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool AuthenticateWebFailure_reason_Parse(absl::string_view name, AuthenticateWebFailure_reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthenticateWebFailure_reason>(
      AuthenticateWebFailure_reason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CreateAccountWebSuccess final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.CreateAccountWebSuccess) */ {
 public:
  inline CreateAccountWebSuccess() : CreateAccountWebSuccess(nullptr) {}
  ~CreateAccountWebSuccess() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateAccountWebSuccess(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateAccountWebSuccess(const CreateAccountWebSuccess& from) : CreateAccountWebSuccess(nullptr, from) {}
  inline CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
      : CreateAccountWebSuccess(nullptr, std::move(from)) {}
  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
        &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) { a.Swap(&b); }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWebSuccess* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateAccountWebSuccess>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebSuccess& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebSuccess& from) { CreateAccountWebSuccess::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateAccountWebSuccess* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.CreateAccountWebSuccess"; }

 protected:
  explicit CreateAccountWebSuccess(::google::protobuf::Arena* arena);
  CreateAccountWebSuccess(::google::protobuf::Arena* arena, const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(::google::protobuf::Arena* arena, CreateAccountWebSuccess&& from) noexcept
      : CreateAccountWebSuccess(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // optional int32 userId = 2;
  bool has_userid() const;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.CreateAccountWebSuccess)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t requestid_;
    ::int32_t userid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFailure final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.CreateAccountWebFailure) */ {
 public:
  inline CreateAccountWebFailure() : CreateAccountWebFailure(nullptr) {}
  ~CreateAccountWebFailure() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateAccountWebFailure(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateAccountWebFailure(const CreateAccountWebFailure& from) : CreateAccountWebFailure(nullptr, from) {}
  inline CreateAccountWebFailure(CreateAccountWebFailure&& from) noexcept
      : CreateAccountWebFailure(nullptr, std::move(from)) {}
  inline CreateAccountWebFailure& operator=(const CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFailure& operator=(CreateAccountWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFailure*>(
        &_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CreateAccountWebFailure& a, CreateAccountWebFailure& b) { a.Swap(&b); }
  inline void Swap(CreateAccountWebFailure* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebFailure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWebFailure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateAccountWebFailure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebFailure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebFailure& from) { CreateAccountWebFailure::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateAccountWebFailure* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.CreateAccountWebFailure"; }

 protected:
  explicit CreateAccountWebFailure(::google::protobuf::Arena* arena);
  CreateAccountWebFailure(::google::protobuf::Arena* arena, const CreateAccountWebFailure& from);
  CreateAccountWebFailure(::google::protobuf::Arena* arena, CreateAccountWebFailure&& from) noexcept
      : CreateAccountWebFailure(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using reason = CreateAccountWebFailure_reason;
  static constexpr reason ACCOUNT_ALREADY_EXISTS = CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr reason INVALID_PASSWORD = CreateAccountWebFailure_reason_INVALID_PASSWORD;
  static constexpr reason INTERNAL_SERVER_ERROR = CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return CreateAccountWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN = CreateAccountWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX = CreateAccountWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE = CreateAccountWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* reason_descriptor() {
    return CreateAccountWebFailure_reason_descriptor();
  }
  template <typename T>
  static inline const std::string& reason_Name(T value) {
    return CreateAccountWebFailure_reason_Name(value);
  }
  static inline bool reason_Parse(absl::string_view name, reason* value) {
    return CreateAccountWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.CreateAccountWebFailure)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t requestid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWeb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  ~CreateAccountWeb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateAccountWeb(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateAccountWeb(const CreateAccountWeb& from) : CreateAccountWeb(nullptr, from) {}
  inline CreateAccountWeb(CreateAccountWeb&& from) noexcept
      : CreateAccountWeb(nullptr, std::move(from)) {}
  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
        &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) { a.Swap(&b); }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWeb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CreateAccountWeb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateAccountWeb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateAccountWeb& from) { CreateAccountWeb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateAccountWeb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.CreateAccountWeb"; }

 protected:
  explicit CreateAccountWeb(::google::protobuf::Arena* arena);
  CreateAccountWeb(::google::protobuf::Arena* arena, const CreateAccountWeb& from);
  CreateAccountWeb(::google::protobuf::Arena* arena, CreateAccountWeb&& from) noexcept
      : CreateAccountWeb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // optional string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  void clear_plaintextpassword() ;
  const std::string& plaintextpassword() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_plaintextpassword(Arg_&& arg, Args_... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_NODISCARD std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* value);

  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(
      const std::string& value);
  std::string* _internal_mutable_plaintextpassword();

  public:
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.CreateAccountWeb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr plaintextpassword_;
    ::int32_t requestid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.AuthenticateWebSuccess) */ {
 public:
  inline AuthenticateWebSuccess() : AuthenticateWebSuccess(nullptr) {}
  ~AuthenticateWebSuccess() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticateWebSuccess(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticateWebSuccess(const AuthenticateWebSuccess& from) : AuthenticateWebSuccess(nullptr, from) {}
  inline AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
      : AuthenticateWebSuccess(nullptr, std::move(from)) {}
  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
        &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) { a.Swap(&b); }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWebSuccess* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticateWebSuccess>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebSuccess& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebSuccess& from) { AuthenticateWebSuccess::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AuthenticateWebSuccess* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.AuthenticateWebSuccess"; }

 protected:
  explicit AuthenticateWebSuccess(::google::protobuf::Arena* arena);
  AuthenticateWebSuccess(::google::protobuf::Arena* arena, const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(::google::protobuf::Arena* arena, AuthenticateWebSuccess&& from) noexcept
      : AuthenticateWebSuccess(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // optional string creationDate = 3;
  bool has_creationdate() const;
  void clear_creationdate() ;
  const std::string& creationdate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creationdate(Arg_&& arg, Args_... args);
  std::string* mutable_creationdate();
  PROTOBUF_NODISCARD std::string* release_creationdate();
  void set_allocated_creationdate(std::string* value);

  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(
      const std::string& value);
  std::string* _internal_mutable_creationdate();

  public:
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // optional int32 userId = 2;
  bool has_userid() const;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.AuthenticateWebSuccess)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr creationdate_;
    ::int32_t requestid_;
    ::int32_t userid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.AuthenticateWebFailure) */ {
 public:
  inline AuthenticateWebFailure() : AuthenticateWebFailure(nullptr) {}
  ~AuthenticateWebFailure() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticateWebFailure(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticateWebFailure(const AuthenticateWebFailure& from) : AuthenticateWebFailure(nullptr, from) {}
  inline AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
      : AuthenticateWebFailure(nullptr, std::move(from)) {}
  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
        &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) { a.Swap(&b); }
  inline void Swap(AuthenticateWebFailure* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebFailure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWebFailure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticateWebFailure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebFailure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebFailure& from) { AuthenticateWebFailure::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AuthenticateWebFailure* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.AuthenticateWebFailure"; }

 protected:
  explicit AuthenticateWebFailure(::google::protobuf::Arena* arena);
  AuthenticateWebFailure(::google::protobuf::Arena* arena, const AuthenticateWebFailure& from);
  AuthenticateWebFailure(::google::protobuf::Arena* arena, AuthenticateWebFailure&& from) noexcept
      : AuthenticateWebFailure(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using reason = AuthenticateWebFailure_reason;
  static constexpr reason INVALID_CREDENTIALS = AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
  static constexpr reason INTERNAL_SERVER_ERROR = AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return AuthenticateWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN = AuthenticateWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX = AuthenticateWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE = AuthenticateWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* reason_descriptor() {
    return AuthenticateWebFailure_reason_descriptor();
  }
  template <typename T>
  static inline const std::string& reason_Name(T value) {
    return AuthenticateWebFailure_reason_Name(value);
  }
  static inline bool reason_Parse(absl::string_view name, reason* value) {
    return AuthenticateWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.AuthenticateWebFailure)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t requestid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:authentProtoBuf.AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  ~AuthenticateWeb() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticateWeb(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticateWeb(const AuthenticateWeb& from) : AuthenticateWeb(nullptr, from) {}
  inline AuthenticateWeb(AuthenticateWeb&& from) noexcept
      : AuthenticateWeb(nullptr, std::move(from)) {}
  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
        &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) { a.Swap(&b); }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWeb* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticateWeb>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticateWeb& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticateWeb& from) { AuthenticateWeb::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AuthenticateWeb* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "authentProtoBuf.AuthenticateWeb"; }

 protected:
  explicit AuthenticateWeb(::google::protobuf::Arena* arena);
  AuthenticateWeb(::google::protobuf::Arena* arena, const AuthenticateWeb& from);
  AuthenticateWeb(::google::protobuf::Arena* arena, AuthenticateWeb&& from) noexcept
      : AuthenticateWeb(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // optional string email = 2;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  void clear_plaintextpassword() ;
  const std::string& plaintextpassword() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_plaintextpassword(Arg_&& arg, Args_... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_NODISCARD std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* value);

  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(
      const std::string& value);
  std::string* _internal_mutable_plaintextpassword();

  public:
  // optional int32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid() ;
  ::int32_t requestid() const;
  void set_requestid(::int32_t value);

  private:
  ::int32_t _internal_requestid() const;
  void _internal_set_requestid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:authentProtoBuf.AuthenticateWeb)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr plaintextpassword_;
    ::int32_t requestid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authenticationProtoBuf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateAccountWeb

// optional int32 requestId = 1;
inline bool CreateAccountWeb::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CreateAccountWeb::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void CreateAccountWeb::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWeb.requestId)
}
inline ::int32_t CreateAccountWeb::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void CreateAccountWeb::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

// optional string email = 2;
inline bool CreateAccountWeb::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateAccountWeb::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWeb::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWeb.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateAccountWeb::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentProtoBuf.CreateAccountWeb.email)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* CreateAccountWeb::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:authentProtoBuf.CreateAccountWeb.email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CreateAccountWeb::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentProtoBuf.CreateAccountWeb.email)
}

// optional string plaintextPassword = 3;
inline bool CreateAccountWeb::has_plaintextpassword() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CreateAccountWeb::clear_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.plaintextpassword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountWeb::plaintextpassword() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateAccountWeb::set_plaintextpassword(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWeb.plaintextPassword)
}
inline std::string* CreateAccountWeb::mutable_plaintextpassword() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:authentProtoBuf.CreateAccountWeb.plaintextPassword)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_plaintextpassword() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.plaintextpassword_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(value, GetArena());
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.plaintextpassword_.Mutable( GetArena());
}
inline std::string* CreateAccountWeb::release_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:authentProtoBuf.CreateAccountWeb.plaintextPassword)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.plaintextpassword_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plaintextpassword_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.plaintextpassword_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.plaintextpassword_.IsDefault()) {
          _impl_.plaintextpassword_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentProtoBuf.CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// optional int32 requestId = 1;
inline bool CreateAccountWebSuccess::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateAccountWebSuccess::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebSuccess::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWebSuccess.requestId)
}
inline ::int32_t CreateAccountWebSuccess::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void CreateAccountWebSuccess::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

// optional int32 userId = 2;
inline bool CreateAccountWebSuccess::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CreateAccountWebSuccess::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void CreateAccountWebSuccess::set_userid(::int32_t value) {
  _internal_set_userid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWebSuccess.userId)
}
inline ::int32_t CreateAccountWebSuccess::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void CreateAccountWebSuccess::_internal_set_userid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// -------------------------------------------------------------------

// CreateAccountWebFailure

// optional int32 requestId = 1;
inline bool CreateAccountWebFailure::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateAccountWebFailure::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CreateAccountWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.CreateAccountWebFailure.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebFailure::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.CreateAccountWebFailure.requestId)
}
inline ::int32_t CreateAccountWebFailure::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void CreateAccountWebFailure::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

// -------------------------------------------------------------------

// AuthenticateWeb

// optional int32 requestId = 1;
inline bool AuthenticateWeb::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AuthenticateWeb::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWeb.requestId)
}
inline ::int32_t AuthenticateWeb::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void AuthenticateWeb::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

// optional string email = 2;
inline bool AuthenticateWeb::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AuthenticateWeb::clear_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWeb.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticateWeb::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentProtoBuf.AuthenticateWeb.email)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(value, GetArena());
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* AuthenticateWeb::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:authentProtoBuf.AuthenticateWeb.email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthenticateWeb::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentProtoBuf.AuthenticateWeb.email)
}

// optional string plaintextPassword = 3;
inline bool AuthenticateWeb::has_plaintextpassword() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AuthenticateWeb::clear_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.plaintextpassword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plaintextpassword() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticateWeb::set_plaintextpassword(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWeb.plaintextPassword)
}
inline std::string* AuthenticateWeb::mutable_plaintextpassword() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:authentProtoBuf.AuthenticateWeb.plaintextPassword)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_plaintextpassword() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.plaintextpassword_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(value, GetArena());
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.plaintextpassword_.Mutable( GetArena());
}
inline std::string* AuthenticateWeb::release_plaintextpassword() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:authentProtoBuf.AuthenticateWeb.plaintextPassword)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.plaintextpassword_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.plaintextpassword_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.plaintextpassword_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.plaintextpassword_.IsDefault()) {
          _impl_.plaintextpassword_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentProtoBuf.AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// optional int32 requestId = 1;
inline bool AuthenticateWebSuccess::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AuthenticateWebSuccess::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebSuccess::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWebSuccess.requestId)
}
inline ::int32_t AuthenticateWebSuccess::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void AuthenticateWebSuccess::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

// optional int32 userId = 2;
inline bool AuthenticateWebSuccess::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AuthenticateWebSuccess::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void AuthenticateWebSuccess::set_userid(::int32_t value) {
  _internal_set_userid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWebSuccess.userId)
}
inline ::int32_t AuthenticateWebSuccess::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_;
}
inline void AuthenticateWebSuccess::_internal_set_userid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_ = value;
}

// optional string creationDate = 3;
inline bool AuthenticateWebSuccess::has_creationdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AuthenticateWebSuccess::clear_creationdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.creationdate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWebSuccess::creationdate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticateWebSuccess::set_creationdate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creationdate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::mutable_creationdate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:authentProtoBuf.AuthenticateWebSuccess.creationDate)
  return _s;
}
inline const std::string& AuthenticateWebSuccess::_internal_creationdate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.creationdate_.Get();
}
inline void AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creationdate_.Set(value, GetArena());
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creationdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.creationdate_.Mutable( GetArena());
}
inline std::string* AuthenticateWebSuccess::release_creationdate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:authentProtoBuf.AuthenticateWebSuccess.creationDate)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.creationdate_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creationdate_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.creationdate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.creationdate_.IsDefault()) {
          _impl_.creationdate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentProtoBuf.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// optional int32 requestId = 1;
inline bool AuthenticateWebFailure::has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AuthenticateWebFailure::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentProtoBuf.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebFailure::set_requestid(::int32_t value) {
  _internal_set_requestid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:authentProtoBuf.AuthenticateWebFailure.requestId)
}
inline ::int32_t AuthenticateWebFailure::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_;
}
inline void AuthenticateWebFailure::_internal_set_requestid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace authentProtoBuf


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::authentProtoBuf::CreateAccountWebFailure_reason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::authentProtoBuf::CreateAccountWebFailure_reason>() {
  return ::authentProtoBuf::CreateAccountWebFailure_reason_descriptor();
}
template <>
struct is_proto_enum<::authentProtoBuf::AuthenticateWebFailure_reason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::authentProtoBuf::AuthenticateWebFailure_reason>() {
  return ::authentProtoBuf::AuthenticateWebFailure_reason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_authenticationProtoBuf_2eproto_2epb_2eh
